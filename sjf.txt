#include <stdio.h>
#include <stdbool.h>
#include <limits.h>

typedef struct {
    int pid, at, bt, remaining_bt;
    int ct, tat, wt, rt, start_time;
    bool completed;
} Process;

void calculate_and_print(Process p[], int n) {
    float totalTAT = 0, totalWT = 0, totalRT = 0;

    printf("\nPID\tAT\tBT\tCT\tTAT\tWT\tRT\n");
    for (int i = 0; i < n; i++) {
        p[i].tat = p[i].ct - p[i].at;
        p[i].wt = p[i].tat - p[i].bt;
        p[i].rt = p[i].start_time - p[i].at;

        totalTAT += p[i].tat;
        totalWT += p[i].wt;
        totalRT += p[i].rt;

        printf("P%d\t%d\t%d\t%d\t%d\t%d\t%d\n",
            p[i].pid, p[i].at, p[i].bt, p[i].ct, p[i].tat, p[i].wt, p[i].rt);
    }

    printf("\nAverage Turnaround Time = %.2f", totalTAT / n);
    printf("\nAverage Waiting Time = %.2f", totalWT / n);
    printf("\nAverage Response Time = %.2f\n", totalRT / n);
}

void sjf_non_preemptive(Process p[], int n) {
    int currentTime = 0, completed = 0;

    while (completed < n) {
        int idx = -1, minBT = INT_MAX;

        for (int i = 0; i < n; i++) {
            if (!p[i].completed && p[i].at <= currentTime && p[i].bt < minBT) {
                minBT = p[i].bt;
                idx = i;
            }
        }

        if (idx == -1) {
            currentTime++;
        } else {
            p[idx].start_time = currentTime;
            currentTime += p[idx].bt;
            p[idx].ct = currentTime;
            p[idx].completed = true;
            completed++;
        }
    }

    calculate_and_print(p, n);
}

void sjf_preemptive(Process p[], int n) {
    int currentTime = 0, completed = 0;

    for (int i = 0; i < n; i++) {
        p[i].remaining_bt = p[i].bt;
        p[i].completed = false;
        p[i].start_time = -1;
    }

    while (completed < n) {
        int idx = -1, minRT = INT_MAX;

        for (int i = 0; i < n; i++) {
            if (!p[i].completed && p[i].at <= currentTime && p[i].remaining_bt < minRT && p[i].remaining_bt > 0) {
                minRT = p[i].remaining_bt;
                idx = i;
            }
        }

        if (idx == -1) {
            currentTime++;
        } else {
            if (p[idx].start_time == -1)
                p[idx].start_time = currentTime;

            p[idx].remaining_bt--;
            currentTime++;

            if (p[idx].remaining_bt == 0) {
                p[idx].ct = currentTime;
                p[idx].completed = true;
                completed++;
            }
        }
    }

    calculate_and_print(p, n);
}

int main() {
    int n, choice;

    printf("Enter number of processes: ");
    scanf("%d", &n);

    Process p[n];
    printf("Enter Arrival Times (space-separated): ");
    for (int i = 0; i < n; i++) {
        scanf("%d", &p[i].at);
        p[i].pid = i + 1;
    }

    printf("Enter Burst Times (space-separated): ");
    for (int i = 0; i < n; i++) {
        scanf("%d", &p[i].bt);
    }

    printf("\n========== SJF (Non-Preemptive) ==========\n");
    sjf_non_preemptive(p, n);

    printf("\n========== SJF (Preemptive) ==========\n");
    sjf_preemptive(p, n);

    return 0;
}