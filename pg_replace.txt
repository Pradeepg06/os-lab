#include <stdio.h>

#define MAX_PAGES 100
#define MAX_FRAMES 10

void printFrames(int step, int frameArray[], int frames, int page, int isPageFault) {
    printf("%2d |", step);
    for (int i = 0; i < frames; i++) {
        if (frameArray[i] != -1)
            printf(" %2d", frameArray[i]);
        else
            printf(" --");
    }
    printf(" | %2d", page);
    if (isPageFault) printf("  *");
    printf("\n");
}

void fifo_pr(int referenceString[], int pages, int frames) {
    int frameArray[MAX_FRAMES], pageFaults = 0, idx = 0;

    for (int i = 0; i < frames; i++) frameArray[i] = -1;

    printf("\n--- FIFO Page Replacement ---\n");
    printf("Step|");
    for (int i = 0; i < frames; i++) printf(" F%d", i + 1);
    printf(" |Pg |Fault\n");

    for (int i = 0; i < pages; i++) {
        int page = referenceString[i];
        int pageFound = 0;

        for (int j = 0; j < frames; j++) {
            if (frameArray[j] == page) {
                pageFound = 1;
                break;
            }
        }

        int isFault = 0;
        if (!pageFound) {
            frameArray[idx] = page;
            idx = (idx + 1) % frames;
            pageFaults++;
            isFault = 1;
        }

        printFrames(i + 1, frameArray, frames, page, isFault);
    }

    printf("Total page faults (FIFO): %d\n", pageFaults);
}

void lru_pr(int referenceString[], int pages, int frames) {
    int frameArray[MAX_FRAMES], pageFaults = 0;
    int lastUsed[MAX_FRAMES];

    for (int i = 0; i < frames; i++) {
        frameArray[i] = -1;
        lastUsed[i] = -1;
    }

    printf("\n--- LRU Page Replacement ---\n");
    printf("Step|");
    for (int i = 0; i < frames; i++) printf(" F%d", i + 1);
    printf(" |Pg |Fault\n");

    for (int i = 0; i < pages; i++) {
        int page = referenceString[i];
        int pageFound = 0;

        for (int j = 0; j < frames; j++) {
            if (frameArray[j] == page) {
                pageFound = 1;
                lastUsed[j] = i;
                break;
            }
        }

        int isFault = 0;
        if (!pageFound) {
            int leastUsedIdx = 0;
            for (int j = 1; j < frames; j++) {
                if (lastUsed[j] < lastUsed[leastUsedIdx]) {
                    leastUsedIdx = j;
                }
            }
            frameArray[leastUsedIdx] = page;
            lastUsed[leastUsedIdx] = i;
            pageFaults++;
            isFault = 1;
        }

        printFrames(i + 1, frameArray, frames, page, isFault);
    }

    printf("Total page faults (LRU): %d\n", pageFaults);
}

int findOptimalPage(int referenceString[], int pages, int current, int frames[], int numFrames) {
    int farthest = current, optimalIdx = -1;

    for (int i = 0; i < numFrames; i++) {
        int j;
        for (j = current + 1; j < pages; j++) {
            if (frames[i] == referenceString[j]) {
                if (j > farthest) {
                    farthest = j;
                    optimalIdx = i;
                }
                break;
            }
        }

        if (j == pages) return i; // never used again
    }

    return (optimalIdx == -1) ? 0 : optimalIdx;
}

void optima_pr(int referenceString[], int pages, int frames) {
    int frameArray[MAX_FRAMES], pageFaults = 0;

    for (int i = 0; i < frames; i++) frameArray[i] = -1;

    printf("\n--- Optimal Page Replacement ---\n");
    printf("Step|");
    for (int i = 0; i < frames; i++) printf(" F%d", i + 1);
    printf(" |Pg |Fault\n");

    for (int i = 0; i < pages; i++) {
        int page = referenceString[i];
        int pageFound = 0;

        for (int j = 0; j < frames; j++) {
            if (frameArray[j] == page) {
                pageFound = 1;
                break;
            }
        }

        int isFault = 0;
        if (!pageFound) {
            int optimalIdx = findOptimalPage(referenceString, pages, i, frameArray, frames);
            frameArray[optimalIdx] = page;
            pageFaults++;
            isFault = 1;
        }

        printFrames(i + 1, frameArray, frames, page, isFault);
    }

    printf("Total page faults (Optimal): %d\n", pageFaults);
}

int main() {
    int referenceString[MAX_PAGES], pages, frames;

    printf("Enter number of pages: ");
    scanf("%d", &pages);

    printf("Enter the reference string:\n");
    for (int i = 0; i < pages; i++) {
        scanf("%d", &referenceString[i]);
    }

    printf("Enter number of frames: ");
    scanf("%d", &frames);

    fifo_pr(referenceString, pages, frames);
    lru_pr(referenceString, pages, frames);
    optima_pr(referenceString, pages, frames);

    return 0;
}
