#include <stdio.h>
#include <stdbool.h>

typedef struct {
    int pid, at, bt, remaining_bt;
    int ct, tat, wt, rt;
    bool is_in_queue, started;
} Process;

void enqueue(int queue[], int *rear, int value) {
    queue[(*rear)++] = value;
}

int dequeue(int queue[], int *front) {
    return queue[(*front)++];
}

void round_robin(Process p[], int n, int tq) {
    int currentTime = 0, completed = 0;
    int queue[1000], front = 0, rear = 0;

    // Sort by arrival time
    int earliest = 1e9;
    for (int i = 0; i < n; i++) {
        p[i].remaining_bt = p[i].bt;
        p[i].is_in_queue = false;
        p[i].started = false;
        if (p[i].at < earliest) earliest = p[i].at;
    }
    currentTime = earliest;

    // Initial enqueue
    for (int i = 0; i < n; i++) {
        if (p[i].at == currentTime) {
            enqueue(queue, &rear, i);
            p[i].is_in_queue = true;
        }
    }

    while (completed < n) {
        if (front == rear) {
            currentTime++;
            for (int i = 0; i < n; i++) {
                if (!p[i].is_in_queue && p[i].at <= currentTime && p[i].remaining_bt > 0) {
                    enqueue(queue, &rear, i);
                    p[i].is_in_queue = true;
                }
            }
            continue;
        }

        int idx = dequeue(queue, &front);

        if (!p[idx].started) {
            p[idx].rt = currentTime - p[idx].at;
            p[idx].started = true;
        }

        int exec_time = (p[idx].remaining_bt >= tq) ? tq : p[idx].remaining_bt;
        p[idx].remaining_bt -= exec_time;
        currentTime += exec_time;

        // Enqueue new arrivals during this time slice
        for (int t = currentTime - exec_time + 1; t <= currentTime; t++) {
            for (int i = 0; i < n; i++) {
                if (!p[i].is_in_queue && p[i].at == t && p[i].remaining_bt > 0) {
                    enqueue(queue, &rear, i);
                    p[i].is_in_queue = true;
                }
            }
        }

        if (p[idx].remaining_bt == 0) {
            p[idx].ct = currentTime;
            completed++;
        } else {
            enqueue(queue, &rear, idx);
        }
    }

    float totalTAT = 0, totalWT = 0, totalRT = 0;

    printf("\nPID\tAT\tBT\tCT\tTAT\tWT\tRT\n");
    for (int i = 0; i < n; i++) {
        p[i].tat = p[i].ct - p[i].at;
        p[i].wt = p[i].tat - p[i].bt;

        totalTAT += p[i].tat;
        totalWT += p[i].wt;
        totalRT += p[i].rt;

        printf("P%d\t%d\t%d\t%d\t%d\t%d\t%d\n",
               p[i].pid, p[i].at, p[i].bt, p[i].ct, p[i].tat, p[i].wt, p[i].rt);
    }

    printf("\nAverage Turnaround Time = %.2f", totalTAT / n);
    printf("\nAverage Waiting Time = %.2f", totalWT / n);
    printf("\nAverage Response Time = %.2f\n", totalRT / n);
}

int main() {
    int n, tq;
    printf("Enter number of processes: ");
    scanf("%d", &n);

    Process p[n];
    printf("Enter Arrival Times (space-separated): ");
    for (int i = 0; i < n; i++) {
        scanf("%d", &p[i].at);
        p[i].pid = i + 1;
    }

    printf("Enter Burst Times (space-separated): ");
    for (int i = 0; i < n; i++) {
        scanf("%d", &p[i].bt);
    }

    printf("Enter Time Quantum: ");
    scanf("%d", &tq);

    printf("\n========== Round Robin Scheduling ==========\n");
    round_robin(p, n, tq);

    return 0;
}
